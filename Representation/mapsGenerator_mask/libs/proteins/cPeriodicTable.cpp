/*************************************************************************\
 
 NANO-D, 2010
 All Rights Reserved.
 
 \**************************************************************************/

#include "cPeriodicTable.hpp"


const std::map<int, elementInformation> cPeriodicTable::periodicTableMap = {
  {('H'<<8),     {1.2, 1.00794}},
  {('H'<<8)|'e', {1.4, 4.00260}},
  {('L'<<8)|'i', {1.82, 6.941}},
  {('B'<<8)|'e', {2.0, 9.012182}},
  {('B'<<8),     {2.0, 10.811}},
  {('C'<<8),     {1.7, 12.0107}},
  {('N'<<8),     {1.55, 14.0067}},
  {('O'<<8),     {1.52, 15.9994}},
  {('F'<<8),     {1.47, 18.9984032}},
  {('N'<<8)|'e', {1.54, 20.1797}},
  {('N'<<8)|'a', {2.27, 22.989770}},
  {('M'<<8)|'g', {1.73, 24.3050}},
  {('A'<<8)|'l', {2.0, 26.981538}},
  {('S'<<8)|'i', {2.1, 28.0855}},
  {('P'<<8),     {1.9, 30.973761}},
  {('S'<<8),     {1.8, 32.065}},
  {('C'<<8)|'l', {1.75, 35.453}},
  {('A'<<8)|'r', {1.88, 39.948}},
  {('K'<<8),     {2.75, 39.0983}},
	// modified from 2.0 to correctly display connections
  {('C'<<8)|'a', {1.2, 40.078}},
  {('S'<<8)|'c', {2.0, 44.955910}},
  {('T'<<8)|'i', {2.0, 47.867}},
  {('V'<<8),     {2.0, 50.9415}},
  {('C'<<8)|'r', {2.0, 51.9961}},
  {('M'<<8)|'n', {2.0, 54.938049}},
  {('F'<<8)|'e', {2.0, 55.845}},
  {('C'<<8)|'o', {2.0, 58.9332}},
  {('N'<<8)|'i', {1.63, 58.6934}},
  {('C'<<8)|'u', {1.4, 63.546}},
  {('Z'<<8)|'n', {1.39, 65.409}},
  {('G'<<8)|'a', {1.07, 69.723}},
  {('G'<<8)|'e', {2.0, 72.64}},
  {('A'<<8)|'a', {1.85, 74.92160}},
  {('S'<<8)|'e', {1.9, 78.96}},
  {('B'<<8)|'r', {1.85, 79.904}},
  {('K'<<8)|'r', {2.02, 83.798}},
  {('R'<<8)|'b', {2.0, 85.4678}},
  {('S'<<8)|'r', {2.0, 87.62}},
  {('Y'<<8),     {2.0, 88.90585}},
  {('Z'<<8)|'r', {2.0, 91.224}},
  {('N'<<8)|'b', {2.0, 92.90638}},
  {('M'<<8)|'o', {2.0, 95.94}},
  {('T'<<8)|'c', {2.0, 98.0}},
  {('R'<<8)|'u', {2.0, 101.07}},
  {('R'<<8)|'h', {2.0, 102.90550}},
  {('P'<<8)|'d', {1.63, 106.42}},
  {('A'<<8)|'g', {1.72, 107.8682}},
  {('C'<<8)|'d', {1.58, 112.411}},
  {('I'<<8)|'n', {1.93, 114.818}},
  {('S'<<8)|'n', {2.17, 118.710}},
  {('S'<<8)|'b', {2.0, 121.760}},
  {('T'<<8)|'e', {2.06, 127.60}},
  {('I'<<8),     {1.98, 126.90447}},
  {('X'<<8)|'e', {2.16, 131.293}},
  {('C'<<8)|'s', {2.0, 132.90545}},
  {('B'<<8)|'a', {2.0, 137.327}},
  {('L'<<8)|'a', {2.0, 138.9055}},
  {('C'<<8)|'e', {2.0, 140.116}},
  {('P'<<8)|'r', {2.0, 140.90765}},
  {('N'<<8)|'d', {2.0, 144.24}},
  {('P'<<8)|'m', {2.0, 145.0}},
  {('S'<<8)|'m', {2.0, 150.36}},
  {('E'<<8)|'u', {2.0, 151.964}},
  {('G'<<8)|'d', {2.0, 157.25}},
  {('T'<<8)|'b', {2.0, 158.92534}},
  {('D'<<8)|'y', {2.0, 162.500}},
  {('H'<<8)|'o', {2.0, 164.93032}},
  {('E'<<8)|'r', {2.0, 167.259}},
  {('T'<<8)|'m', {2.0, 168.93421}},
  {('Y'<<8)|'b', {2.0, 173.04}},
  {('L'<<8)|'u', {2.0, 174.967}},
  {('H'<<8)|'f', {2.0, 178.49}},
  {('T'<<8)|'a', {2.0, 180.9479}},
  {('W'<<8),     {2.0, 183.84}},
  {('R'<<8)|'e', {2.0, 186.207}},
  {('O'<<8)|'s', {2.0, 190.23}},
  {('I'<<8)|'r', {2.0, 192.217}},
  {('P'<<8)|'t', {1.72, 195.078}},
  {('A'<<8)|'u', {1.66, 196.96655}},
  {('H'<<8)|'g', {1.55, 200.59}},
  {('T'<<8)|'l', {1.96, 204.3833}},
  {('P'<<8)|'b', {2.02, 207.2}},
  {('B'<<8)|'i', {2.0, 208.98038}},
  {('P'<<8)|'o', {2.0, 209.0}},
  {('A'<<8)|'t', {2.0, 210.0}},
  {('R'<<8)|'n', {2.0, 222.0}},
  {('F'<<8)|'r', {2.0, 223.0}},
  {('R'<<8)|'a', {2.0, 226.0}},
  {('A'<<8)|'c', {2.0, 227.0}},
  {('T'<<8)|'h', {2.0, 232.0381}},
  {('P'<<8)|'a', {2.0, 231.03588}},
  {('U'<<8),     {1.86, 238.02891}},
  {('N'<<8)|'p', {2.0, 237.0}},
  {('P'<<8)|'u', {2.0, 244.0}},
  {('A'<<8)|'m', {2.0, 243.0}},
  {('C'<<8)|'m', {2.0, 247.0}},
  {('B'<<8)|'k', {2.0, 247.0}},
  {('C'<<8)|'f', {2.0, 251.0}},
  {('E'<<8)|'s', {2.0, 252.0}},
  {('F'<<8)|'m', {2.0, 257.0}},
  {('M'<<8)|'d', {2.0, 258.0}},
  {('N'<<8)|'o', {2.0, 259.0}},
  {('L'<<8)|'r', {2.0, 262.0}},
  {('R'<<8)|'f', {2.0, 261.0}},
  {('D'<<8)|'b', {2.0, 262.0}},
  {('S'<<8)|'g', {2.0, 266.0}},
  {('B'<<8)|'h', {2.0, 264.0}},
  {('H'<<8)|'s', {2.0, 269.0}},
  {('M'<<8)|'t', {2.0, 268.0}},
  {('D'<<8)|'s', {2.0, 271.0}},
  {('R'<<8)|'g', {2.0, 272.0}},
};

float cPeriodicTable::getMass(const char element[2]) {
  std::map<int, elementInformation>::const_iterator it = periodicTableMap.find(element[0] << 8 | element[1]);
  if (it != periodicTableMap.end())
    return (it->second).mass;
  return -1;
}

float cPeriodicTable::getRadius(const char element[2]) {
  std::map<int, elementInformation>::const_iterator it = periodicTableMap.find(element[0] << 8 | element[1]);
  if (it != periodicTableMap.end())
    return (it->second).radius;
  return -1;
}
